#!/usr/bin/env node
/* eslint-disable @typescript-eslint/no-require-imports */

const fs = require("fs-extra");
const cp = require("cross-spawn");
const gulp = require("gulp");
const path = require("path");
const build_readme = require("./readme.build");
const { execSync } = require("child_process");

const latestCommitShortHash = execSync("git rev-parse --short HEAD", { cwd: path.join(__dirname, "..") })
  .toString()
  .trim();
const remote = "https://github.com/dimaslanjaka/hexo-themes";
const branch = "gh-pages";
const deployDir = ".deploy_git";
/**
 * @type {import("child_process").SpawnOptions}
 */
const cpOpt = { cwd: deployDir, stdio: "inherit" };

async function initializeGit() {
  await cp.spawnAsync("git", ["remote", "add", "origin", remote], { ...cpOpt, stdio: "ignore" });
  await cp.spawnAsync("git", ["remote", "set-url", "origin", remote], { ...cpOpt, stdio: "ignore" });
  await cp.spawnAsync("git", ["checkout", branch], cpOpt);
  await cp.spawnAsync("git", ["pull"], cpOpt);
  await cp.spawnAsync("git", ["rm", "-rf", "."], cpOpt);
}

/**
 * copy and process files using gulp
 * @param {string|string[]} src
 * @param {string} dest
 * @param {Parameters<typeof gulp['src']>[1]} options
 * @returns {Promise<void>}
 */
async function gulpCopyAsync(src, dest, options) {
  return new Promise((resolve, reject) => {
    gulp.src(src, options).pipe(gulp.dest(dest)).on("end", resolve).on("error", reject);
  });
}

/**
 * Copies a file from source to destination with additional checks and options.
 *
 * @param {string} srcPath - The path to the source file.
 * @param {string} destPath - The path to the destination file.
 * @param {import('fs-extra').CopyOptions} [options={}] - Optional options to forward to fs.copy.
 * @returns {Promise<void>} - Resolves if the file is copied successfully.
 * @throws {Error} - Throws an error if the source file does not exist.
 */
async function copyFile(srcPath, destPath, options = {}) {
  try {
    // Check if the source file exists
    const srcExists = await fs.pathExists(srcPath);
    if (!srcExists) {
      console.error(`Source file does not exist: ${srcPath}`);
      return false;
    }

    // Ensure the destination directory exists (recursive)
    const destDir = path.dirname(destPath);
    await fs.ensureDir(destDir);

    // Copy the file with provided options
    await fs.copy(srcPath, destPath, options);

    console.log(`File copied successfully from ${srcPath} to ${destPath}`);
  } catch (error) {
    console.error(`Error copying file: ${error.message}`);
    throw error;
  }
}

async function main() {
  if (fs.existsSync(deployDir + "/.git")) {
    await initializeGit();
    const src = "./public/**/*";
    console.log("copying", src, "to", deployDir);
    await gulpCopyAsync(src, deployDir);
    console.log("fix corruped binary files");
    await copyFile("public", deployDir);
    await fs.writeFile(path.join(deployDir, ".nojekyll"), "");
    build_readme();
    await copyFile(".gitattributes", path.join(deployDir, ".gitattributes"));
    await cp.spawnAsync("git", ["add", "."], cpOpt);
    await cp.spawnAsync("git", ["commit", "-m", `update site ${latestCommitShortHash}`], cpOpt);
    await cp.spawnAsync("git", ["push", "-u", "origin", branch], cpOpt);
  }
}

main();
